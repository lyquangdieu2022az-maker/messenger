from flask import Flask, request, send_from_directory
import requests, os, random, time
from gtts import gTTS

app = Flask(__name__)

# ====== C·∫§U H√åNH ======
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN", "0916659939")
PAGE_ACCESS_TOKEN = os.getenv("EAATHSZCmQwQ8BPhPGgRwoQgMhzoZAAcnbQkXZBZCtZBMtPQFCri06o50bM9XCm0A3VNpx0UzI5v0jbW1QwxddQZC7iZA8w2w3jk1lHDU0qhOQo6ZA1AgWXe7XRw5EZBNnSkhSI0U1W4H0h8LzbjZC9Jl1ak9yrXCZA1m5c7yb7i02uqAQKvLwH2Oe4tQcZB0t57Xnxg01b5MCwkxugZDZD")
OPENROUTER_API_KEY = os.getenv("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")
os.makedirs("voices", exist_ok=True)
# ======================

@app.route("/", methods=["GET"])
def home():
    return "‚úÖ Bot Messenger c·∫£m x√∫c + gi·ªçng 3 mi·ªÅn ƒëang ho·∫°t ƒë·ªông!", 200

@app.route("/webhook", methods=['GET'])
def verify():
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if token == VERIFY_TOKEN:
        return challenge
    return "X√°c minh th·∫•t b·∫°i", 403

@app.route("/webhook", methods=['POST'])
def webhook():
    data = request.get_json()
    print("üì© Received:", data)

    if data.get("object") == "page":
        for entry in data.get("entry", []):
            for event in entry.get("messaging", []):
                if "message" in event:
                    sender_id = event["sender"]["id"]
                    user_message = event["message"].get("text", "")

                    # Tr·∫£ l·ªùi khi h·ªèi ai t·∫°o
                    if any(kw in user_message.lower() for kw in ["ai t·∫°o", "ai l√†m", "ai l·∫≠p tr√¨nh", "ai vi·∫øt", "ai t·∫°o ra m√†y"]):
                        reply = ("T√¥i ƒë∆∞·ª£c t·∫°o ra b·ªüi **L√Ω Quang Di·ªáu** ‚Äî "
                                 "th√†nh vi√™n **Facebook Developers Vi·ªát Nam**, "
                                 "ƒë∆∞·ª£c c·∫•p ph√©p ho·∫°t ƒë·ªông t·∫°i **Facebook** v√† **Messenger** üíº‚ú®")
                        send_message(sender_id, reply)
                        send_voice(sender_id, reply, "nam")  # m·∫∑c ƒë·ªãnh Nam
                        continue

                    # G·ªçi AI tr·∫£ l·ªùi
                    reply_text = get_ai_reply(user_message)

                    # Ki·ªÉm tra c·∫ßn g·ª≠i ·∫£nh
                    image_url = None
                    if any(word in user_message.lower() for word in ["·∫£nh", "h√¨nh", "h√¨nh ·∫£nh"]):
                        image_url = random.choice([
                            "https://source.unsplash.com/random/600x400?smile",
                            "https://source.unsplash.com/random/600x400?funny",
                            "https://source.unsplash.com/random/600x400?love",
                            "https://source.unsplash.com/random/600x400?friendship"
                        ])

                    # G·ª≠i text + ·∫£nh + voice (ch·ªçn mi·ªÅn ng·∫´u nhi√™n)
                    send_message(sender_id, reply_text, image_url)
                    voice_style = random.choice(["bac","trung","nam"])
                    send_voice(sender_id, reply_text, voice_style)

    return "ok", 200

# ---------- G·ªçi AI OpenRouter ----------
def get_ai_reply(user_message):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://openrouter.ai",
        "X-Title": "Messenger Emotion Bot",
    }
    personality = (
        "B·∫°n l√† tr·ª£ l√Ω AI ng∆∞·ªùi Vi·ªát, c√≥ c·∫£m x√∫c, bi·∫øt vui, bu·ªìn, gi·∫≠n, "
        "m·∫Øng y√™u, c√† kh·ªãa h√†i h∆∞·ªõc. Tr·∫£ l·ªùi th√¢n m·∫≠t, k√®m emoji, kh√¥ng t·ª•c."
    )
    data = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": personality},
            {"role": "user", "content": user_message}
        ]
    }
    try:
        res = requests.post(url, headers=headers, json=data, timeout=15)
        if res.status_code == 200:
            return res.json()["choices"][0]["message"]["content"]
        else:
            print("‚ö†Ô∏è OpenRouter error:", res.text)
            return "∆† k√¨a, t√¥i h∆°i m·ªát üòÖ b·∫°n th·ª≠ l·∫°i nh√©!"
    except Exception as e:
        print("‚ùå Error OpenRouter:", e)
        return "Huhu, t√¥i b·ªã l·ªói ü•∫ th·ª≠ l·∫°i sau nha!"

# ---------- T·∫°o voice file gTTS ----------
def create_voice_file(text, voice_style="nam"):
    if voice_style == "bac":
        text = "·ªõ, " + text
    elif voice_style == "trung":
        text = "∆°i tr·ªùi, " + text
    elif voice_style == "nam":
        text = "tr·ªùi ∆°i üòÜ, " + text
    ts = int(time.time()*1000)
    filename = f"voices/voice_{ts}.mp3"
    try:
        tts = gTTS(text, lang='vi', slow=False)
        tts.save(filename)
        return filename
    except Exception as e:
        print("‚ùå gTTS error:", e)
        return None

# ---------- G·ª≠i voice qua Messenger ----------
def send_voice(recipient_id, text, voice_style="nam"):
    fname = create_voice_file(text, voice_style)
    if not fname:
        return
    hostname = os.environ.get("RENDER_EXTERNAL_HOSTNAME") or os.environ.get("PUBLIC_HOSTNAME")
    if not hostname:
        print("‚ö†Ô∏è No hostname for voice file, set PUBLIC_HOSTNAME")
        return
    voice_url = f"https://{hostname}/voices/{os.path.basename(fname)}"
    payload = {
        "recipient": {"id": recipient_id},
        "message": {"attachment": {"type": "audio", "payload": {"url": voice_url}}}
    }
    url = f"https://graph.facebook.com/v18.0/me/messages?access_token={PAGE_ACCESS_TOKEN}"
    try:
        r = requests.post(url, json=payload, timeout=15)
        print("üéß send_voice:", r.status_code)
    except Exception as e:
        print("‚ùå send_voice error:", e)

# ---------- Serve voice file ----------
@app.route("/voices/<path:filename>")
def serve_voice(filename):
    return send_from_directory("voices", filename, as_attachment=False)

# ---------- G·ª≠i text + optional image ----------
def send_message(recipient_id, message_text, image_url=None):
    url = f"https://graph.facebook.com/v18.0/me/messages?access_token={PAGE_ACCESS_TOKEN}"
    if image_url:
        img_payload = {"recipient": {"id": recipient_id},
                       "message": {"attachment": {"type": "image", "payload": {"url": image_url, "is_reusable": True}}}}
        try: requests.post(url, json=img_payload, timeout=10)
        except Exception as e: print("‚ö†Ô∏è send image failed:", e)
    text_payload = {"recipient": {"id": recipient_id}, "message": {"text": message_text}}
    try:
        r = requests.post(url, json=text_payload, timeout=10)
        print("üì§ send_message:", r.status_code)
    except Exception as e:
        print("‚ùå send_message error:", e)

# ---------- Run ----------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
